---
layout: "post"
title: "Permiers pas avec Ansible, impression perso"
date: 2014-10-15 10:53:12
comments: false
categories:
- bash
- run
- security
- bases
music: 
- youtube.com/watch?v=D8cR2FKWSHM
---
{% img left half images/blog_run.svg 150 120 "Main theme is run" "Run" %}
---
# Introduction

[Ansible](http://www.ansible.com) est un outil python scripting de déploiement. L'idée est definir un script d'installation. Le script est un fichier en [YAML](http://yaml.org/). Il me semble que sa spécificité principale est de ne pas nécessiter d'agent et d'être exécuter pricipalement via SSH, d'avoir un faible impact mémoire. 

Il y a (IMHO) 3 concepts majeurs à prendre en compte :
 - Le playbook
 - Les modules
 - Les roles
 
### le playbook 

C'est le script d'installation à proprement parler. Il contient un suite de propriété qui seront utiliser pour exécuté l'installation de la machine distante.

###les modules

Les modules sont les "commandes" qu'il est possible d'éxécuter directement par ansible. Elles sont développé en python et encapsule des actions de plus bas niveau (yum install, mkdir, service start etc...) 

###Les roles

Les roles sont des playbooks qui définissent un ensemble ou sous ensemble d'operations d'installation. Au sein de votre SI (système d'information) vous avez des serveurs de base de données, des serveur d'application, des reverse-proxy, etc..., Ces roles sont donc des templates (modèle) d'installation.  

NB : _L'internet, Git, c'est le partage, la capitalisation, le croudsourcing c'est pour cela qu'il existe [Galaxy Ansible](https://galaxy.ansible.com/) qui permets d'avoir une vaste bibliothèque de roles développer par des tiers.


## En Pratique 
### Un playbook
Un  playbook ressemble à cela :

{% codeblock lang:yaml %}
‘‘‘
- hosts: webservers
  vars:
    http_port: 80
    max_clients: 200
  remote_user: root
  tasks:
  - name: ensure apache is at the latest version
    yum: pkg=httpd state=latest
  - name: write the apache config file
    template: src=/srv/httpd.j2 dest=/etc/httpd.conf
    notify:
    - restart apache
  - name: ensure apache is running (and enable it at boot)
    service: name=httpd state=started enabled=yes
  handlers:
    - name: restart apache
      service: name=httpd state=restarted
‘‘‘{% endcodeblock %}

ou bien 

{% codeblock lang:yaml %}
‘‘‘
- hosts: webservers
  vars:
    http_port: 80
    max_clients: 200
 roles:
   - {role: webservers-template}
‘‘‘{% endcodeblock %}

### Un role
{% codeblock lang:yaml %}
‘‘‘
ls -l ansible-xwiki-ctrl/

defaults/main.yml
files/main.yml
handlers/main.yml
meta/main.yml
tasks/main.yml
templates/
vars/main.yml
README.md

‘‘‘{% endcodeblock %}


## Installation/configuration
Je passe ce point, il y a plein d'informration pour cela, j'ai pas eu de soucis avec pep (je doit commancé à m'y faire ;-)

## En pratique                                            
Sur cette base, j'ai essayé de crée des roles pour [XWiki](http://www.xwiki.org) à titre d'exercices. J'ai donc divisé ma stack (pile applicative) suivant ces différents roles :
 - [jdk](https://github.com/kanedafromparis/ansible-xwiki-jdk)
 - [mysql](https://github.com/kanedafromparis/ansible-xwiki-mysql)
 - [tomcat](https://github.com/kanedafromparis/ansible-xwiki-tomcat)
 - [war](https://github.com/kanedafromparis/ansible-xwiki-war)
 - [ctrl](https://github.com/kanedafromparis/ansible-xwiki-ctrl)

Vous trouverez les roles sur git-hub et les exercices de variabilisation [ici](https://github.com/kanedafromparis/ansible-xwiki-example)

En pratique, je peux donc installer sur un serveur "debian" le jdk 7 ou 8 (openjdk ou oracle), mysql que je veux (debian ou mysql.org), la version d'Xwiki que je souhaite. En modifiant les vars de mon script ou la target de mon playbook.
 
# Conclusion
## Complexité et modularité
Mon constat est que comme souvant le niveau de variablilisation, ce qu'il faut rendre paramètrable, est toujours un curseur à revoir en fonction du context et de ce que l'on souhaite mettre en oeuvre.

## Strategie d'upload
Ayant travaillé depuis ma machine local, j'ai downloader plusieur fois au cours de l'exercice les paquets de plusieur Mo. Il y a des stratégie, pour les copier depuis sa machine et/ou répliqué en //. C'est un point qu'il est nécessaire de creuser en fonction de son environement.

## Immuabilité et test
Personnelement, j'ai utilisé Virtualbox pour faire des snapshot et valider mes playbook, j'ai regardé pour le fun docker+jenkins, un retour dessus peux-être plus tard. 

## Strategie de template de VM
Avec ansible, je produit un script d'installation qui me permets notament d'avoir un seul script quelque soit mes environements (en ayant variabilisé les OS). mais cela peu prendre un certain temps, il peut y avoir des gains à partir d'image de VM provisionner.
J'ai entendu parler d'utiliser ansible sur docker pour les environnements de dev et d'appliqué ces derniers sur des VM pour la prod.
A creusé...

# Les deux trois trucs pour debugger
#### Pour connaitre les facts
{% codeblock lang:bash %}
ansible -m setup nodexwiki | less
{% endcodeblock %}

#### Pour valider la bonne interprétation du playbooks
{% codeblock lang:bash %}
ansible-playbook ansible-xwiki-example/example.yml --check
{% endcodeblock %}