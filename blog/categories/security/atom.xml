<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Kaneda's Blog]]></title>
  <link href="http://kanedafromparis.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://kanedafromparis.github.io/"/>
  <updated>2015-10-21T12:11:25+02:00</updated>
  <id>http://kanedafromparis.github.io/</id>
  <author>
    <name><![CDATA[kanedafromparis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Permiers Pas Avec Ansible, Impression Perso]]></title>
    <link href="http://kanedafromparis.github.io/blog/2015/10/15/Ansible/"/>
    <updated>2015-10-15T12:53:12+02:00</updated>
    <id>http://kanedafromparis.github.io/blog/2015/10/15/Ansible</id>
    <content type="html"><![CDATA[<h2><img class="left half" src="images/blog_run.svg" width="150" height="120" title="&ldquo;Main theme is run&rdquo; &ldquo;Run&rdquo;" ></h2>

<h1>Introduction</h1>

<p><a href="http://www.ansible.com">Ansible</a> est un outil python scripting de déploiement. L'idée est de définir un script d'installation. Le script est un fichier en <a href="http://yaml.org/">YAML</a>. Il me semble que sa spécificité principale est de ne pas nécessiter d'agent et d'être exécuter principalement via SSH, d'avoir un faible impact mémoire.</p>

<p>Il y a (IMHO) 3 concepts majeurs à prendre en compte :
 - Le playbook
 - Les modules
 - Les rôles</p>

<h3>le playbook</h3>

<p>C'est le script d'installation à proprement parler. Il contient une suite de propriétés qui seront utilisées pour exécuter l'installation de la machine distante.</p>

<h3>les modules</h3>

<p>Les modules sont les &ldquo;commandes&rdquo; qu'il est possible d'exécuter directement par ansible. Elles sont développées en python et encapsulent des actions de plus bas niveau (yum install, mkdir, service start etc&hellip;)</p>

<h3>Les rôles</h3>

<p>Les rôles sont des playbooks qui définissent un ensemble ou sous ensemble d'opérations d'installation. Au sein de votre SI (système d'information) vous avez des serveurs de base de données, des serveurs d'application, des reverse-proxy, etc&hellip;, ces rôles sont donc des templates (modèle) d'installation.</p>

<p>NB : _L'internet, Git, c'est le partage, la capitalisation, le croudsourcing c'est pour cela qu'il existe <a href="https://galaxy.ansible.com/">Galaxy Ansible</a> qui permets d'avoir une vaste bibliothèque de rôles développer par des tiers.</p>

<h2>En pratique</h2>

<h3>Un playbook</h3>

<p>Un  playbook ressemble à cela :</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">‘‘‘</span>
</span><span class='line'><span class="l-Scalar-Plain">- hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">webservers</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">max_clients</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">200</span>
</span><span class='line'><span class="-Error">  </span><span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ensure apache is at the latest version</span>
</span><span class='line'>    <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pkg=httpd state=latest</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">write the apache config file</span>
</span><span class='line'>    <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src=/srv/httpd.j2 dest=/etc/httpd.conf</span>
</span><span class='line'>    <span class="l-Scalar-Plain">notify</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">restart apache</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ensure apache is running (and enable it at boot)</span>
</span><span class='line'>    <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=httpd state=started enabled=yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">restart apache</span>
</span><span class='line'>      <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=httpd state=restarted</span>
</span><span class='line'><span class="l-Scalar-Plain">‘‘‘</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>ou bien</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">‘‘‘</span>
</span><span class='line'><span class="l-Scalar-Plain">- hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">webservers</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vars</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">http_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>    <span class="l-Scalar-Plain">max_clients</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">200</span>
</span><span class='line'><span class="-Error"> </span><span class="l-Scalar-Plain">rôles</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="p-Indicator">{</span><span class="nv">role</span><span class="p-Indicator">:</span> <span class="nv">webservers-template</span><span class="p-Indicator">}</span>
</span><span class='line'><span class="l-Scalar-Plain">‘‘‘</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Un role</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">‘‘‘</span>
</span><span class='line'><span class="l-Scalar-Plain">ls -l ansible-xwiki-ctrl/&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;defaults/main.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">files/main.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">handlers/main.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">meta/main.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">tasks/main.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">templates/</span>
</span><span class='line'><span class="l-Scalar-Plain">vars/main.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">README.md&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;‘‘‘</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Installation/configuration</h2>

<p>Je passe ce point, il y a plein d'information pour cela, je n’ai pas eu de soucis avec pep (je dois commencer à m'y faire) ;-)</p>

<h2>En pratique</h2>

<p>Sur cette base, j'ai essayé de créer des rôles pour <a href="http://www.xwiki.org">XWiki</a> à titre d'exercices. J'ai donc divisé ma stack (pile applicative) suivant ces différents rôles :
 - <a href="https://github.com/kanedafromparis/ansible-xwiki-jdk">jdk</a>
 - <a href="https://github.com/kanedafromparis/ansible-xwiki-mysql">mysql</a>
 - <a href="https://github.com/kanedafromparis/ansible-xwiki-tomcat">tomcat</a>
 - <a href="https://github.com/kanedafromparis/ansible-xwiki-war">war</a>
 - <a href="https://github.com/kanedafromparis/ansible-xwiki-ctrl">ctrl</a></p>

<p>Vous trouverez les rôles sur git-hub et les exercices de variabilisation <a href="https://github.com/kanedafromparis/ansible-xwiki-example">ici</a></p>

<p>En pratique, je peux donc installer sur un serveur &ldquo;debian&rdquo; le jdk 7 ou 8 (openjdk ou oracle), mysql que je veux (debian ou mysql.org), la version d'Xwiki que je souhaite. En modifiant les vars de mon script ou la target de mon playbook.</p>

<h1>Conclusion</h1>

<h2>Complexité et modularité</h2>

<p>Mon constat est que comme souvent le niveau de variablilisation, de ce qu'il faut rendre paramétrable, est toujours un curseur à revoir en fonction du contexte et de ce que l'on souhaite mettre en oeuvre.</p>

<h2>Strategie d'upload</h2>

<p>Ayant travaillé depuis ma machine locale, j'ai downloadé plusieurs fois au cours de l'exercice les paquets de plusieurs Mo. Il y a des stratégies, pour les copier depuis sa machine et/ou répliquer en parallèle. C'est un point qu'il est nécessaire de creuser en fonction de son environnement.</p>

<h2>Immuabilité et test</h2>

<p>Personnellement, j'ai utilisé Virtualbox pour faire des snapshot et valider mes playbook, j'ai regardé pour le fun docker+jenkins, un retour dessus peut être plus tard.</p>

<h2>Strategie de template de VM</h2>

<p>Avec ansible, je produis un script d'installation qui me permet notamment d'avoir un seul script, quels que soient mes environnements (en ayant variabilisé les OS), mais cela peu prendre un certain temps, il peut y avoir des gains à partir d'image de VM provisionner.
J'ai entendu parler d'utiliser ansible sur docker pour les environnements de dev et d'appliquer ces derniers sur des VM pour la prod.
À creuser&hellip;</p>

<h1>Les deux trois trucs pour débugger</h1>

<h4>Pour connaître les facts</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ansible -m setup nodexwiki <span class="p">|</span> less
</span></code></pre></td></tr></table></div></figure></p>

<h4>Pour valider la bonne interprétation du playbooks</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ansible-playbook ansible-xwiki-example/example.yml <span class="p">&amp;</span>ndash<span class="p">;</span>check
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Bases De SSH]]></title>
    <link href="http://kanedafromparis.github.io/blog/2015/10/12/SSH-basics/"/>
    <updated>2015-10-12T21:53:12+02:00</updated>
    <id>http://kanedafromparis.github.io/blog/2015/10/12/SSH-basics</id>
    <content type="html"><![CDATA[<h2><img class="left half" src="images/blog_run.svg" width="150" height="120" title="&ldquo;Main theme is run&rdquo; &ldquo;Run&rdquo;" ></h2>

<h1>L'accès à distance</h1>

<p>Dans mon blog précédent, on s'est rappelé combien la ligne de commande était un outil pratique et que cela permettait d'automatiser des opérations. L'informatique c'est l'automatisation par nature.
La ligne de commande permet donc d'enchaîner mes taches. C'est une abstraction en cela que votre ligne de commande peut être exécutée à distance.
Historiquement via telnet, mais le flux réseau en telnet n'est pas chiffrer, on préfère donc utiliser SSH (Secure Shell).</p>

<h1>SSH</h1>

<h2>Clés publiques</h2>

<p>Pour que l'échange soit privé, il y a un mécanisme de chiffrement asymétrique, avec un CLe priver et une clé publique. Lorsque vous vous connectez à un serveur ayant un service SSH, vous faites un échange de clés. La clé du serveur sera associée à son IP dans ~/.ssh/known_hosts.</p>

<pre><code class="Bash"># ssh jvaljeanuser@example.com
Host key not found from the list of known hosts.
Are you sure you want to continue connecting (yes/no)? yes
Host 'example.com' added to the list of known hosts.
user@example.com's password: *******
</code></pre>

<p>Par défaut, un serveur ssh autorise l'authentification par mot de passe. C'est pratique, mais finalement pas tellement sécurisé.
<em>Pizza73</em> et <em>01022008</em> sont des mots de passe faciles à bruteforcer. Il est donc préférable de préférer une authentification par clés.</p>

<h2>configuration OpenSSH</h2>

<p>Pour mieux sécuriser son serveur, on va :</p>

<ul>
<li>interdire l'utilisateur root</li>
<li>interdire l'authentification par mots de passe</li>
<li>définir l'emplacement des clés autorisé</li>
<li>ajoute la clés de l'utilisateur jvaljean (on verra comment la créer plus loin)</li>
</ul>


<p>NB : Cette commande est proposée en root, mais elle passe avec sudo.</p>

<p><strong> ATTENTION </strong> après cela on ne peut plus ce connecter avec l'utilisateur root</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">TIMESLOT</span><span class="o">=</span>&lt;code&gt;date +%Y-%m-%d-%H-%M-%S&lt;/code&gt; <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> cp /etc/ssh/sshd_config /etc/ssh/sshd_config.<span class="nv">$TIMESLOT</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>sed -i -e <span class="p">&amp;</span>ldquo<span class="p">;</span>s/PermitRootLogin yes/PermitRootLogin no/g<span class="p">&amp;</span>rdquo<span class="p">;</span> /etc/ssh/sshd_config <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>sed -i -e <span class="p">&amp;</span>ldquo<span class="p">;</span>s/#PasswordAuthentication yes/PasswordAuthentication no/g<span class="p">&amp;</span>rdquo<span class="p">;</span> /etc/ssh/sshd_config <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>/etc/init.d/sshd restart <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>mkdir /home/jvaljean/.ssh/ <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span>
</span><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>ssh-rsa X2xEB3NzaC1yc2EX2xEDAQABAAACAQCb3AG5VnbDxV3iEdLd+gqVQsOWlx7rg9K4O7i8S8SK5j1/tMq8LWTpzQToEUvOU1Psgmk/rMG2y1qvk1J3xN5s+YIeisXznMgdAF7qotGFbZy1Z6qd/hDqnmu0WbxBBvQOwe4CeyQ75heGx5HXiD2Sshv5sLemNcST4UwNx/TWBpcH0y5oGH1j+3opexQM4enOkJCFAvkBiwJ/oS4v55Qdd59dXHFr9h9TP5MYSa6H/x4BJjumAr9Epd1zTaiuR475cIjmSfB5cHDTqFv82FKCLl2IBnNc2rw5ISXASqcOblbRayEq73kEvd8zuyeA9cAT3Eq9Y3j15mAsjjwQEHx31lt6iLFIZaaCmTYtN3g7F6hv2VnVAJGmwc6cD7Ow9HGo4pLSjxqUwYdVLKSz/5ftT/bltK0S6DicNrGhCRBFUIL7EKO5pqrUa5bKQfHyiKCv8WvjK97KUpqKlCDE+Q7mpJZ3VnFz2WYVczS0sP39g9L976QJ80EfjllwD3cvfduhNhCFoVd3cLVWyxIUW7b/gpfulLgKhT4LabQdWx5445LHMiUSnGql3gH/P/bn5d/5YWvDZTo3YICE0fSEq<span class="p">&amp;</span>ndash<span class="p">;</span>4qhQbXRdIPZQxf+yTbIB91ZuXtJrPRLYUWdfXCYsl4ktrqAlfycopOD5vjeNtvWyUhHg3zFVIb+Hzb7e3ZIzYtQ<span class="o">==</span> &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x6a;&amp;#x76;&amp;#x61;&amp;#x6c;&amp;#106;&amp;#x65;&amp;#97;&amp;#110;&amp;#x40;&amp;#x65;&amp;#120;&amp;#97;&amp;#x6d;&amp;#x70;&amp;#108;&amp;#101;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#106;&amp;#x76;&amp;#97;&amp;#x6c;&amp;#106;&amp;#101;&amp;#x61;&amp;#x6e;&amp;#x40;&amp;#x65;&amp;#120;&amp;#x61;&amp;#109;&amp;#112;&amp;#108;&amp;#101;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&amp;rdquo; &gt;&gt; /home/jvaljean/.ssh/authorized_keys &amp;amp;&amp;amp;</span>
</span><span class='line'>chown -Rv jvaljean:jvaljean /home/jvaljean/.ssh/ <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>chmod u+rw,og-rwx /home/jvaljean/.ssh/authorized_keys
</span></code></pre></td></tr></table></div></figure></p>

<p>Maintenant, l'utilisateur root ne peux plus ce connecter, l'utilisateur jvaljean peut se connecter uniquement avec sa clé publique &ldquo;ssh-rsa X2x&hellip;&rdquo;</p>

<h2>création de la clé</h2>

<p>Pour créer sa cles il faut choisir :</p>

<ul>
<li>sa taille : <em>4 096</em> (d'après l'ANSII donne une durée de vie acceptable ici : <a href="http://www.ssi.gouv.fr/uploads/2015/01/RGS_v-2-0_B1.pdf">http://www.ssi.gouv.fr/uploads/2015/01/RGS_v-2-0_B1.pdf</a>)</li>
<li>l'algorithme : RSA (par défaut)</li>
<li>l'emplacement de la clé (Et oui, on peut et devrais avoir plusieurs clés, on y reviendra plus loin, sinon c'est id_rsa)</li>
<li>un mot de passe pour utiliser la clé (évitons pizza82)</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -b <span class="m">4096</span> -C <span class="p">&amp;</span>ldquo<span class="p">;</span>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#x3a;&amp;#106;&amp;#x76;&amp;#97;&amp;#x6c;&amp;#x6a;&amp;#x65;&amp;#x61;&amp;#110;&amp;#x40;&amp;#x65;&amp;#x78;&amp;#97;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#101;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#106;&amp;#x76;&amp;#x61;&amp;#108;&amp;#106;&amp;#101;&amp;#97;&amp;#x6e;&amp;#64;&amp;#101;&amp;#120;&amp;#97;&amp;#x6d;&amp;#112;&amp;#108;&amp;#101;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure>
ou
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -b <span class="m">4096</span> -C <span class="p">&amp;</span>ldquo<span class="p">;</span>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x6a;&amp;#118;&amp;#97;&amp;#108;&amp;#106;&amp;#x65;&amp;#x61;&amp;#110;&amp;#64;&amp;#x65;&amp;#120;&amp;#x61;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#x65;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#x6a;&amp;#x76;&amp;#97;&amp;#x6c;&amp;#106;&amp;#x65;&amp;#x61;&amp;#110;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#112;&amp;#x6c;&amp;#101;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&amp;rdquo; -f ~/.ssh/id_mongroupedeserver_algo</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Après on peut se connecter au serveur ayant notre clé avec la commande ssh
Rappel :
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh example.com
</span></code></pre></td></tr></table></div></figure>
ou
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -p <span class="m">22</span> -i ~/.ssh/id_mongroupedeserver_algo &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#x6a;&amp;#x76;&amp;#x61;&amp;#108;&amp;#x6a;&amp;#101;&amp;#x61;&amp;#110;&amp;#64;&amp;#101;&amp;#x78;&amp;#97;&amp;#109;&amp;#x70;&amp;#108;&amp;#x65;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#x6a;&amp;#x76;&amp;#x61;&amp;#x6c;&amp;#x6a;&amp;#x65;&amp;#97;&amp;#x6e;&amp;#x40;&amp;#101;&amp;#x78;&amp;#97;&amp;#x6d;&amp;#x70;&amp;#108;&amp;#101;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#109;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>le port-mapping</h2>

<p>Une fonction très pratique de SSH est le port mapping il est possible de mapper un port de votre client local à celui du serveur distant. Cela permet de vous connecter à distance sur vos serveurs comme si vous étiez dans votre réseau. on
peut par exemple mapper le port 8080 d'un Tomcat sur son 8888 local comme ceci</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -p <span class="m">22</span> -i ~/.ssh/id_mongroupedeserver_algo &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x6a;&amp;#118;&amp;#97;&amp;#108;&amp;#x6a;&amp;#x65;&amp;#x61;&amp;#110;&amp;#64;&amp;#101;&amp;#120;&amp;#97;&amp;#x6d;&amp;#112;&amp;#x6c;&amp;#x65;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#106;&amp;#x76;&amp;#97;&amp;#108;&amp;#x6a;&amp;#101;&amp;#97;&amp;#110;&amp;#64;&amp;#x65;&amp;#x78;&amp;#97;&amp;#x6d;&amp;#x70;&amp;#108;&amp;#101;&amp;#x2e;&amp;#99;&amp;#111;&amp;#x6d;&lt;/a&gt; -L 127.0.0.1:8888:example.com:8080</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>on pourra par la suite accéder depuis son client web local sur <a href="http://127.0.0.1:8888">http://127.0.0.1:8888</a> comme si nous étions sur le réseau local de la machine</p>

<h2>~/.ssh/config</h2>

<p>Nous l'avons vu précédemment, la clé d'authenfication est précieuse, mais il est parfois nécessaire de la copier sur d'autre machine, elle peut être corrompu ou obsolète. Enfin, certains groupes de serveur peuvent nécessiter des sécurités différentes.
Pour cela, il est conseillé d'avoir plusieurs cles. Pour éviter de taper des commandes trop longues, il est possible de définir les commandes &ldquo;par défaut, par host dans &rdquo;~/.ssh/config" sous la forme :</p>

<ul>
<li>Host : les serveurs utilisant cette configuration (liste séparée d'un espace)</li>
<li><pre><code>Hostname : le nom du serveur qui appelle celui annoncé par le client
User : le nom de l'utilisateur à utiliser
  IdentityFile ~/.ssh/id_github_mb35_rsa
</code></pre></li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Host example.com
</span><span class='line'>        Hostname &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#106;&amp;#x76;&amp;#x61;&amp;#108;&amp;#x6a;&amp;#x65;&amp;#97;&amp;#x6e;&amp;#64;&amp;#101;&amp;#120;&amp;#97;&amp;#x6d;&amp;#x70;&amp;#108;&amp;#x65;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#106;&amp;#x76;&amp;#97;&amp;#108;&amp;#106;&amp;#101;&amp;#x61;&amp;#110;&amp;#x40;&amp;#101;&amp;#x78;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6c;&amp;#x65;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;</span>
</span><span class='line'>        User &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#x6a;&amp;#118;&amp;#x61;&amp;#x6c;&amp;#106;&amp;#x65;&amp;#x61;&amp;#110;&amp;#x40;&amp;#x65;&amp;#120;&amp;#x61;&amp;#109;&amp;#112;&amp;#108;&amp;#x65;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#x6a;&amp;#118;&amp;#x61;&amp;#x6c;&amp;#106;&amp;#101;&amp;#97;&amp;#x6e;&amp;#64;&amp;#101;&amp;#x78;&amp;#97;&amp;#109;&amp;#112;&amp;#x6c;&amp;#x65;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&lt;/a&gt;</span>
</span><span class='line'>        LocalForward <span class="m">8888</span> 127.0.0.1:8080
</span><span class='line'>          IdentityFile ~/.ssh/id_mongroupedeserver_algo     &lt;br/&gt;
</span></code></pre></td></tr></table></div></figure></p>

<h2>Conclusion</h2>

<p>SSH est l'outil de base du sysadmin et du très tendance DevOps.
IMHO (à mon humble avis) &ldquo;~/.ssh/config&rdquo; n'est pas suffissement connu.</p>
]]></content>
  </entry>
  
</feed>
